<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 也可配置PropertyPlaceholderConfigurer引入外部属性文件 -->
    <context:property-placeholder location="classpath:log4j.properties"/>

    <!-- use-default-filters="false"只扫描@Controller，否则@Controller、@Service、@Repository、@Component都会扫描 -->
    <context:component-scan base-package="com.demo" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 配置CustomEditorConfigurer，自动注册自定义属性编辑器 -->
    <!-- 若使用BeanFactory，则调用registerCustomEditor方法注册自定义属性编辑器 -->
    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <!-- 键实现属性类型，值是属性编辑器类型 -->
                <entry key="com.demo.bean.CarBean" value="com.demo.bean.CarEditor"/>
            </map>
        </property>
    </bean>

    <!-- 配置国际化资源文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>resource</value>
            </list>
        </property>
    </bean>

    <!-- 事件监听器 -->
    <bean id="mailSend" class="com.demo.spring.event.MailSend"/>
    <bean class="com.demo.spring.event.MailSendListener"/>

    <!-- DBCP数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mberdev"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
    <!-- spring jdbc模板类 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 事务管理 -->
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- ①基于 @Transactional 的声明式事务管理 -->
    <tx:annotation-driven/>
    <!-- ②基于Aspectj AOP配置事务 -->
    <!-- 默认查找transactionManager的事务管理器 -->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!-- propagation事务传播行为，isolation事务隔离级别 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <!-- proxy-target-class="true"使用cglib动态代理(动态创建子类)，false使用jdk动态代理(基于接口动态代理) -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="point" expression="execution(* com.demo.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="point"/>
    </aop:config>
    <!-- ③基于Aspectj AOP注解配置事务（@Aspect、@Pointcut、@Before等） -->
    <aop:aspectj-autoproxy/>


    <!-- 工厂方法注入 -->
    <!--<bean id="carFactory" class="com.demo.bean.CarFactory"/>-->
    <!-- 非静态工厂方法注入 -->
    <!--<bean id="car1" factory-bean="carFactory" factory-method="getCar"/>-->
    <!-- 静态工厂方法注入 -->
    <!--<bean id="car2" class="com.demo.bean.CarFactory" factory-method="createCar"/>-->

    <!-- 方法替换 -->
    <!--<bean id="carMethodReplace" class="com.demo.bean.CarMethodReplace"/>
    <bean id="car3" class="com.demo.bean.CarBean">
        &lt;!&ndash; 将car#myInit实现替换成carMethodReplace#reimplement的实现 &ndash;&gt;
        <replaced-method name="myInit" replacer="carMethodReplace"/>
    </bean>-->
</beans>